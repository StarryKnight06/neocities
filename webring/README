a php webring
by rmf of baccyflap.com
this release 2024-09-10

Do you want to build a webring? I sure didn't, or at least not at first. I just wanted to include JavaScript-based webrings on my webring page (baccyflap.com/rsp) without using JavaScript. The PHP code I wrote kept evolving and ended up becoming the basis of this PHP-only webring, which is a lot simpler than most webrings I've come across. You can see it in action at baccyflap.com/noai.

The usual timeline is like this: someone fills in the application form and you get notified. You approve their application by adding their site to webring.json (through a form) and sending them an email saying congratulations, you're on the ring, please generate and add links as explained on the ring page. They do and then they're on the ring. Your ringmasterly duties consist of periodically checking sites to make sure the links are up and changing the state field in the main datafile to 0, 1 or 2 so the ring remains contiguous.

-----
Want to get started right away? Just upload the unzipped folder, visit it in your browser and it'll show the page with a couple of prepopulated example entries. To get applications and email and the approval form working, you'll need to change applications.txt's CHMOD to 622 and webring.json's to 666. If you want to get application emails, open write.php and uncomment the commented out line and put in your email address. Bam, that's it!
-----

Let's get into it. The webring consists of 8 files:

index.php         intro, member list, application form, widgets
webring.json      contains the membership list
write.php         writes the form data to a datafile
thanks.php        shows success/fail after an application attempt
applications.txt  contains all applications
check.php allows  you to edit data before adding it
edit.php allows   you to edit all entries on the ring
edit.php          contains the passphrase for the above two files


INDEX.PHP

index.php has your intro, whatever it may be. Then there's the membership list that displays all members - those that have the ringlinks installed are shown normally, those without links are shown with a gray background, sites that are down are shown in a light gray. index.php gets this information from webring.json; see below for more info.

index.php also contains the application form. Here, the user fills in their website title, URL, a 3 letter code of their choosing to identify their site on the ring, and their name and email address. The form checks whether all fields are filled in and converts the 3 letter code to lowercase and checks whether or not it's unique. The form also contains a a field called 'email' that works as spam control - if a bot puts anything in that field, the form won't work. Primitive but it gets the job done.

index.php ends with a field where the user can input their chosen 3 letter code and hit a button to generate ringlinks that they can put on their site. No links or HTML codes are displayed until they do this. They can input their code and show links *after and before* they're accepted - this form doesn't check whether a 3 letter code actually exists. It does convert them to lowercase if necessary - even though the referrer mechanism that the ring uses is case insensitive, I prefer keeping things lowercase as much as possible.


WEBRING.JSON

webring.json contains the membership list. Sites can be added and edited through check.php and edit.php; if you want to use these, you'll have to change the permissions for webring.json to CHMOD 666. This JSON datafile includes the URL (including http:// or https://), the title of the site, the date it was added and the 3 letter code chosen by the user.

It also includes the field state, which indicates whether a site is up and running with ringlinks installed (state 2), whether it's up and running but has not yet installed the links (state 1) or whether it's gone down entirely (state 0). This way, if a site goes down, you're free to remove it from the ring entirely or to leave it in state 0, to show it as part of the ring's history.

Entries in states 0 and 1 are skipped over in ring navigation. So let's say there's site 1, site 2 and site 3; if site 2 doesn't have its links up or if it's down, navigation will go straight from site 1 to site 3 and vice versa. There is no automatic checking mechanism; you'll have to check yourself. It's always an option to not use this feature and just have every site on the ring in state 2, but your ring will inevitably have broken nodes.


WRITE.PHP

write.php writes the form data to a datafile. In the middle of this file are two lines that are //commented out. If you uncomment the bottom line and input your email address, you'll get an email for each application that includes a link that leads to a password-protected form (check.php) that can add the applicant right to the ring.


THANKS.PHP

thanks.php shows success/fail after an application attempt. It shows some extra information about fails: if the 3 letter code is taken, it'll say that, if not all fields are filled in, it'll say that. If something else goes wrong (usually file permissions that are set wrong) it'll say it doesn't know what went wrong.


APPLICATIONS.TXT

applications.txt is the datafile that holds all applications, including names and email addresses. As it contains email addresses, it's important to set this file's permissions to CHMOD 622, so it can be written to but not read. If you have uncommented the lines as explained above, you don't technically need applications.txt but I recommend keeping this functionality in case PHP's mail function screws up.


CHECK.PHP

check.php is the form that the application email leads to. This form allows you to edit data before adding it to the ring and requires you to say whether the page has the ringlinks up; it'll add the data to webring.json with the state field set accordingly.


EDIT.PHP

edit.php allows you to edit webring.json through a neat little form - this file lists all entries with all their attributes, for you to edit. You can edit one entry at a time, input the passphrase and it'll update.


PASS.PHP

Contains the password used by check.php and edit.php. *Change the password* or anyone who figures out the default password will be able to mess with your webring. Note that this password method isn't particularly secure: if your PHP installation should ever break, users would technically be able to get to the password, as it isn't hashed or salted or any of those things. If you want to feel more secure, you can store this file above your public directory, but for our purposes (running a cute little webring and having a good time), I reckon my method is fine.

Enjoy! I publish the whole thing into the public domain so you can do whatever you want with it.
